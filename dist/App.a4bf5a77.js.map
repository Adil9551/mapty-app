{"version":3,"sources":["src/js/classes/Workout.js","src/js/classes/Running.js","src/js/classes/Cycling.js","src/js/App.js"],"names":["Workout","coords","distance","duration","Date","now","slice","description","type","toUpperCase","months","date","getMonth","getDate","clicks","Running","cadence","calcPace","_setDescription","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","_map","L","map","setView","_mapZoomLevel","tileLayer","attribution","addTo","on","_showForm","_workouts","forEach","work","_renderWorkoutMarker","mapE","_mapEvent","classList","remove","focus","value","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","workout","latlng","lat","lng","push","_renderWorkout","_hideForm","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","id","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","removeItem","location","reload","app"],"mappings":"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","file":"App.a4bf5a77.js","sourceRoot":"..","sourcesContent":["export class Workout {\r\n  date = new Date();\r\n  id = (Date.now() + '').slice(-10);\r\n  clicks = 0;\r\n\r\n  constructor(coords, distance, duration) {\r\n    // this.date = ...\r\n    // this.id = ...\r\n    this.coords = coords; // [lat, lng]\r\n    this.distance = distance; // in km\r\n    this.duration = duration; // in minutes\r\n  }\r\n\r\n  _setDescription() {\r\n    // prettier-ignore\r\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\r\n      months[this.date.getMonth()]\r\n    } ${this.date.getDate()}`;\r\n  }\r\n\r\n  click() {\r\n    this.clicks++;\r\n  }\r\n}\r\n","import { Workout } from './Workout.js';\r\n\r\nexport class Running extends Workout {\r\n  type = 'running';\r\n  constructor(coords, distance, duration, cadence) {\r\n    super(coords, distance, duration);\r\n    this.cadence = cadence;\r\n    this.calcPace();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcPace() {\r\n    // min/km\r\n    this.pace = this.duration / this.distance;\r\n    return this.pace;\r\n  }\r\n}\r\n","import { Workout } from './Workout.js';\r\n\r\nexport class Cycling extends Workout {\r\n  type = 'cycling';\r\n  constructor(coords, distance, duration, elevationGain) {\r\n    super(coords, distance, duration);\r\n    this.elevationGain = elevationGain;\r\n    this.calcSpeed();\r\n    this._setDescription();\r\n  }\r\n\r\n  calcSpeed() {\r\n    // km/h\r\n    this.speed = this.distance / (this.duration / 60);\r\n    return this.speed;\r\n  }\r\n}\r\n","import { Running } from './classes/Running.js';\nimport { Cycling } from './classes/Cycling.js';\n\n('use strict');\n\n//////////////////////////////\n// Application architecture //\n//////////////////////////////\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  _map;\n  _mapZoomLevel = 14;\n  _mapEvent;\n  _workouts = [];\n\n  constructor() {\n    // Get user's position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getLocalStorage();\n\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    // Get the current coordinates\n    if (navigator.geolocation)\n      // On success, get position and pass it to _loadMap\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your location');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n\n    // Setup the coords and map view\n    const coords = [latitude, longitude];\n\n    this._map = L.map('map').setView(coords, this._mapZoomLevel);\n\n    // Initialize the map\n    L.tileLayer(\n      'https://{s}.tile.jawg.io/jawg-sunny/{z}/{x}/{y}{r}.png?access-token=AU8LOodrPojERqNtX2skqaV7mVA6uYNp8pdq5tSFQXuNbdDIZSpp6h5g9p0U8vxz',\n      {\n        attribution:\n          '&copy; <a href=\"http://jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\">&copy; <b>Jawg</b>Maps</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }\n    ).addTo(this._map);\n\n    // Map on click event\n    this._map.on('click', this._showForm.bind(this));\n\n    this._workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this._mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    inputDistance.value =\n      inputCadence.value =\n      inputDuration.value =\n      inputElevation.value =\n        '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this._mapEvent.latlng;\n    let workout;\n    // If running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      // Validate the data\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If cycling, create cycling object\n    if (type === 'cycling') {\n      const elevationGain = +inputElevation.value;\n\n      // Validate the data\n      if (\n        !validInputs(distance, duration, elevationGain) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevationGain);\n    }\n\n    // Add new object to workout\n    this._workouts.push(workout);\n    // console.log(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide the form + clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this._map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title workout__title--${\n          workout.type === 'running' ? 'running' : 'cycling'\n        }\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n        `;\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n            <span class=\"workout__icon\">⚡️</span>\n            <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n            <span class=\"workout__unit\">km/h</span>\n          </div>\n          <div class=\"workout__details\">\n            <span class=\"workout__icon\">⛰</span>\n            <span class=\"workout__value\">${workout.elevationGain}</span>\n            <span class=\"workout__unit\">m</span>\n          </div>\n        </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this._workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this._map.setView(workout.coords, this._mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this._workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this._workouts = data;\n    this._workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"]}